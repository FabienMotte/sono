{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/sono.js",
    "node_modules/events/events.js",
    "src/lib/effect.js",
    "src/lib/effect/analyser.js",
    "src/lib/effect/distortion.js",
    "src/lib/effect/echo.js",
    "src/lib/effect/fake-context.js",
    "src/lib/effect/filter.js",
    "src/lib/effect/flanger.js",
    "src/lib/effect/panner.js",
    "src/lib/effect/phaser.js",
    "src/lib/effect/recorder.js",
    "src/lib/effect/reverb.js",
    "src/lib/group.js",
    "src/lib/sound.js",
    "src/lib/source/buffer-source.js",
    "src/lib/source/media-source.js",
    "src/lib/source/microphone-source.js",
    "src/lib/source/oscillator-source.js",
    "src/lib/source/script-source.js",
    "src/lib/utils/browser.js",
    "src/lib/utils/emitter.js",
    "src/lib/utils/file.js",
    "src/lib/utils/loader.js",
    "src/lib/utils/microphone.js",
    "src/lib/utils/sound-group.js",
    "src/lib/utils/utils.js",
    "src/lib/utils/waveform.js"
  ],
  "names": [],
  "mappingsrxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttpvjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnlpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\n\nvar Browser = require(21),\n    file = require(23),\n    Group = require(14),\n    Loader = require(24),\n    Sound = require(15),\n    SoundGroup = require(26),\n    utils = require(27);\n\nfunction Sono() {\n    var VERSION = '0.0.8',\n        Ctx = (window.AudioContext || window.webkitAudioContext),\n        context = (Ctx ? new Ctx() : null),\n        destination = (context ? context.destination : null),\n        group = new Group(context, destination),\n        gain = group.gain,\n        sounds = group.sounds,\n        api;\n\n    utils.setContext(context);\n\n    /*\n     * Create Sound\n     *\n     * Accepted values for param config:\n     * Object config e.g. { id:'foo', url:['foo.ogg', 'foo.mp3'] }\n     * Array (of files e.g. ['foo.ogg', 'foo.mp3'])\n     * ArrayBuffer\n     * HTMLMediaElement\n     * Filename string (e.g. 'foo.ogg')\n     * Oscillator type string (i.e. 'sine', 'square', 'sawtooth', 'triangle')\n     * ScriptProcessor config object (e.g. { bufferSize: 1024, channels: 1, callback: fn, thisArg: self })\n     */\n\n    var createSound = function(config) {\n        // try to load if config contains URLs\n        if(file.containsURL(config)) {\n            return load(config);\n        }\n\n        var sound = add(config);\n        sound.data = config.data || config;\n\n        return sound;\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroySound = function(soundOrId) {\n        if(!soundOrId) { return; }\n\n        sounds.some(function(sound) {\n            if(sound === soundOrId || sound.id === soundOrId) {\n                sound.destroy();\n                return true;\n            }\n        });\n        return api;\n    };\n\n    var destroyAll = function() {\n        group.destroy();\n        return api;\n    };\n\n    /*\n     * Get Sound by id\n     */\n\n    var getSound = function(id) {\n        var sound;\n        sounds.some(function(item) {\n            if(item.id === id) {\n                sound = item;\n                return true;\n            }\n        });\n        return sound;\n    };\n\n    /*\n     * Create group\n     */\n\n    var createGroup = function(sounds) {\n        var group = new SoundGroup(context, gain);\n        if(sounds) {\n            sounds.forEach(function(sound) {\n                group.add(sound);\n            });\n        }\n        return group;\n    };\n\n    /*\n     * Loading\n     */\n\n    var load = function(config) {\n        if(!config) {\n            throw {\n                name: 'ArgumentException',\n                message: 'Sono.load: param config is undefined'\n            };\n        }\n\n        var onProgress = config.onProgress,\n            onComplete = config.onComplete,\n            thisArg = config.thisArg || config.context || api,\n            url = config.url || config,\n            sound,\n            loader;\n\n        if(file.containsURL(url)) {\n            sound = queue(config);\n            loader = sound.loader;\n        }\n        else if(Array.isArray(url) && file.containsURL(url[0].url) ) {\n            sound = [];\n            loader = new Loader.Group();\n\n            url.forEach(function(file) {\n                sound.push(queue(file, loader));\n            });\n        }\n        else {\n            return null;\n        }\n\n        if(onProgress) {\n            loader.on('progress', function(progress) {\n                onProgress.call(thisArg, progress);\n            });\n        }\n        if(onComplete) {\n            loader.once('complete', function() {\n                loader.off('progress');\n                onComplete.call(thisArg, sound);\n            });\n        }\n        loader.start();\n\n        return sound;\n    };\n\n    var queue = function(config, loaderGroup) {\n        var sound = add(config).load(config);\n\n        if(loaderGroup) {\n            loaderGroup.add(sound.loader);\n        }\n\n        return sound;\n    };\n\n    var add = function(config) {\n        var soundContext = config && config.webAudio === false ? null : context;\n        var sound = new Sound(soundContext, gain);\n        sound.isTouchLocked = isTouchLocked;\n        if(config) {\n            sound.id = config.id || '';\n            sound.loop = !!config.loop;\n            sound.volume = config.volume;\n        }\n        group.add(sound);\n        return sound;\n    };\n\n    /*\n     * Controls\n     */\n\n    var mute = function() {\n        group.mute();\n        return api;\n    };\n\n    var unMute = function() {\n        group.unMute();\n        return api;\n    };\n\n    var fade = function(volume, duration) {\n        group.fade(volume, duration);\n        return api;\n    };\n\n    var pauseAll = function() {\n        group.pause();\n        return api;\n    };\n\n    var resumeAll = function() {\n        group.resume();\n        return api;\n    };\n\n    var stopAll = function() {\n        group.stop();\n        return api;\n    };\n\n    var play = function(id, delay, offset) {\n        getSound(id).play(delay, offset);\n        return api;\n    };\n\n    var pause = function(id) {\n        getSound(id).pause();\n        return api;\n    };\n\n    var stop = function(id) {\n        getSound(id).stop();\n        return api;\n    };\n\n    /*\n     * Mobile touch lock\n     */\n\n    var isTouchLocked = Browser.handleTouchLock(context, function() {\n        isTouchLocked = false;\n        sounds.forEach(function(sound) {\n            sound.isTouchLocked = false;\n        });\n    });\n\n    /*\n     * Page visibility events\n     */\n\n    (function() {\n        var pageHiddenPaused = [];\n\n        // pause currently playing sounds and store refs\n        function onHidden() {\n            sounds.forEach(function(sound) {\n                if(sound.playing) {\n                    sound.pause();\n                    pageHiddenPaused.push(sound);\n                }\n            });\n        }\n\n        // play sounds that got paused when page was hidden\n        function onShown() {\n            while(pageHiddenPaused.length) {\n                pageHiddenPaused.pop().play();\n            }\n        }\n\n        Browser.handlePageVisibility(onHidden, onShown);\n    }());\n\n    /*\n     * Log version & device support info\n     */\n\n    var log = function() {\n        var title = 'Sono ' + VERSION,\n            info = 'Supported:' + api.isSupported +\n                   ' WebAudioAPI:' + api.hasWebAudio +\n                   ' TouchLocked:' + isTouchLocked +\n                   ' Extensions:' + file.extensions;\n\n        if(navigator.userAgent.indexOf('Chrome') > -1) {\n            var args = [\n                    '%c ♫ ' + title +\n                    ' ♫ %c ' + info + ' ',\n                    'color: #FFFFFF; background: #379F7A',\n                    'color: #1F1C0D; background: #E0FBAC'\n                ];\n            console.log.apply(console, args);\n        }\n        else if (window.console && window.console.log.call) {\n            console.log.call(console, title + ' ' + info);\n        }\n    };\n\n    api = {\n        createSound: createSound,\n        destroySound: destroySound,\n        destroyAll: destroyAll,\n        getSound: getSound,\n        createGroup: createGroup,\n        load: load,\n        mute: mute,\n        unMute: unMute,\n        fade: fade,\n        pauseAll: pauseAll,\n        resumeAll: resumeAll,\n        stopAll: stopAll,\n        play: play,\n        pause: pause,\n        stop: stop,\n        log: log,\n\n        canPlay: file.canPlay,\n        context: context,\n        effect: group.effect,\n        extensions: file.extensions,\n        hasWebAudio: !!context,\n        isSupported: file.extensions.length > 0,\n        gain: gain,\n        utils: utils,\n        VERSION: VERSION\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        isTouchLocked: {\n            get: function() {\n                return isTouchLocked;\n            }\n        },\n        sounds: {\n            get: function() {\n                return group.sounds.slice(0);\n            }\n        },\n        volume: {\n            get: function() {\n                return group.volume;\n            },\n            set: function(value) {\n                group.volume = value;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = new Sono();\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "'use strict';\n\nvar Analyser = require(4),\n    Distortion = require(5),\n    Echo = require(6),\n    FakeContext = require(7),\n    Filter = require(8),\n    Flanger = require(9),\n    Panner = require(10),\n    Phaser = require(11),\n    Recorder = require(12),\n    Reverb = require(13);\n\nfunction Effect(context) {\n    context = context || new FakeContext();\n\n    var api,\n        destination,\n        nodeList = [],\n        panning = new Panner(context),\n        sourceNode;\n\n    var add = function(node) {\n        if(!node) { return; }\n        nodeList.push(node);\n        updateConnections();\n        return node;\n    };\n\n    var remove = function(node) {\n        var l = nodeList.length;\n        for (var i = 0; i < l; i++) {\n            if(node === nodeList[i]) {\n                nodeList.splice(i, 1);\n                break;\n            }\n        }\n        var output = node._output || node;\n        output.disconnect();\n        updateConnections();\n        return node;\n    };\n\n    var removeAll = function() {\n        while(nodeList.length) {\n            nodeList.pop().disconnect();\n        }\n        updateConnections();\n        return api;\n    };\n\n    var destroy = function() {\n        removeAll();\n        context = null;\n        destination = null;\n        nodeList = [];\n        sourceNode.disconnect();\n        sourceNode = null;\n    };\n\n    var connect = function(a, b) {\n        //console.log('> connect', (a.name || a.constructor.name), 'to', (b.name || b.constructor.name));\n\n        var output = a._output || a;\n        //console.log('> disconnect output: ', (a.name || a.constructor.name));\n        output.disconnect();\n        //console.log('> connect output: ', (a.name || a.constructor.name), 'to input:', (b.name || b.constructor.name));\n        output.connect(b);\n    };\n\n    var connectToDestination = function(node) {\n        var l = nodeList.length,\n            lastNode = l ? nodeList[l - 1] : sourceNode;\n\n        if(lastNode) {\n            connect(lastNode, node);\n        }\n\n        destination = node;\n    };\n\n    var updateConnections = function() {\n        if(!sourceNode) { return; }\n\n        //console.log('updateConnections:', nodeList.length);\n\n        var node,\n            prev;\n\n        for (var i = 0; i < nodeList.length; i++) {\n            node = nodeList[i];\n            //console.log(i, node);\n            prev = i === 0 ? sourceNode : nodeList[i - 1];\n            connect(prev, node);\n        }\n\n        if(destination) {\n            connectToDestination(destination);\n        }\n    };\n\n    /*\n     * Effects\n     */\n\n    var analyser = function(fftSize, smoothing, minDecibels, maxDecibels) {\n        var node = new Analyser(context, fftSize, smoothing, minDecibels, maxDecibels);\n        return add(node);\n    };\n\n    // lowers the volume of the loudest parts of the signal and raises the volume of the softest parts\n    var compressor = function(config) {\n        config = config || {};\n\n        var node = context.createDynamicsCompressor();\n\n        node.update = function(config) {\n            // min decibels to start compressing at from -100 to 0\n            node.threshold.value = config.threshold !== undefined ? config.threshold : -24;\n            // decibel value to start curve to compressed value from 0 to 40\n            node.knee.value = config.knee !== undefined ? config.knee : 30;\n            // amount of change per decibel from 1 to 20\n            node.ratio.value = config.ratio !== undefined ? config.ratio : 12;\n            // gain reduction currently applied by compressor from -20 to 0\n            node.reduction.value = config.reduction !== undefined ? config.reduction : -10;\n            // seconds to reduce gain by 10db from 0 to 1 - how quickly signal adapted when volume increased\n            node.attack.value = config.attack !== undefined ? config.attack : 0.0003;\n            // seconds to increase gain by 10db from 0 to 1 - how quickly signal adapted when volume redcuced\n            node.release.value = config.release !== undefined ? config.release : 0.25;\n        };\n\n        node.update(config);\n\n        return add(node);\n    };\n\n    var convolver = function(impulseResponse) {\n        // impulseResponse is an audio file buffer\n        var node = context.createConvolver();\n        node.buffer = impulseResponse;\n        return add(node);\n    };\n\n    var delay = function(time) {\n        var node = context.createDelay();\n        if(time !== undefined) { node.delayTime.value = time; }\n        return add(node);\n    };\n\n    var echo = function(time, gain) {\n        var node = new Echo(context, time, gain);\n        return add(node);\n    };\n\n    var distortion = function(amount) {\n        var node = new Distortion(context, amount);\n        // Float32Array defining curve (values are interpolated)\n        //node.curve\n        // up-sample before applying curve for better resolution result 'none', '2x' or '4x'\n        //node.oversample = '2x';\n        return add(node);\n    };\n\n    var filter = function(type, frequency, quality, gain) {\n        var filter = new Filter(context, type, frequency, quality, gain);\n        return add(filter);\n    };\n\n    var lowpass = function(frequency, quality, gain) {\n        return filter('lowpass', frequency, quality, gain);\n    };\n\n    var highpass = function(frequency, quality, gain) {\n        return filter('highpass', frequency, quality, gain);\n    };\n\n    var bandpass = function(frequency, quality, gain) {\n        return filter('bandpass', frequency, quality, gain);\n    };\n\n    var lowshelf = function(frequency, quality, gain) {\n        return filter('lowshelf', frequency, quality, gain);\n    };\n\n    var highshelf = function(frequency, quality, gain) {\n        return filter('highshelf', frequency, quality, gain);\n    };\n\n    var peaking = function(frequency, quality, gain) {\n        return filter('peaking', frequency, quality, gain);\n    };\n\n    var notch = function(frequency, quality, gain) {\n        return filter('notch', frequency, quality, gain);\n    };\n\n    var allpass = function(frequency, quality, gain) {\n        return filter('allpass', frequency, quality, gain);\n    };\n\n    var flanger = function(config) {\n        var node = new Flanger(context, config);\n        return add(node);\n    };\n\n    var gain = function(value) {\n        var node = context.createGain();\n        if(value !== undefined) {\n            node.gain.value = value;\n        }\n        return node;\n    };\n\n    var panner = function() {\n        var node = new Panner(context);\n        return add(node);\n    };\n\n    var phaser = function(config) {\n        var node = new Phaser(context, config);\n        return add(node);\n    };\n\n    var recorder = function(passThrough) {\n        var node = new Recorder(context, passThrough);\n        return add(node);\n    };\n\n    var reverb = function(seconds, decay, reverse) {\n        var node = new Reverb(context, seconds, decay, reverse);\n        return add(node);\n    };\n\n    var script = function(config) {\n        config = config || {};\n        // bufferSize 256 - 16384 (pow 2)\n        var bufferSize = config.bufferSize || 1024;\n        var inputChannels = config.inputChannels === undefined ? 0 : inputChannels;\n        var outputChannels = config.outputChannels === undefined ? 1 : outputChannels;\n\n        var node = context.createScriptProcessor(bufferSize, inputChannels, outputChannels);\n\n        var thisArg = config.thisArg || config.context || node;\n        var callback = config.callback || function() {};\n\n        // available props:\n        /*\n        event.inputBuffer\n        event.outputBuffer\n        event.playbackTime\n        */\n        // Example: generate noise\n        /*\n        var output = event.outputBuffer.getChannelData(0);\n        var l = output.length;\n        for (var i = 0; i < l; i++) {\n            output[i] = Math.random();\n        }\n        */\n        node.onaudioprocess = callback.bind(thisArg);\n\n        return add(node);\n    };\n\n    var setSource = function(node) {\n        sourceNode = node;\n        updateConnections();\n        return node;\n    };\n\n    var setDestination = function(node) {\n        connectToDestination(node);\n        return node;\n    };\n\n    //\n\n    api = {\n        context: context,\n        nodeList: nodeList,\n        panning: panning,\n\n        add: add,\n        remove: remove,\n        removeAll: removeAll,\n        destroy: destroy,\n        setSource: setSource,\n        setDestination: setDestination,\n\n        analyser: analyser,\n        compressor: compressor,\n        convolver: convolver,\n        delay: delay,\n        echo: echo,\n        distortion: distortion,\n        filter: filter,\n        lowpass: lowpass,\n        highpass: highpass,\n        bandpass: bandpass,\n        lowshelf: lowshelf,\n        highshelf: highshelf,\n        peaking: peaking,\n        notch: notch,\n        allpass: allpass,\n        flanger: flanger,\n        gain: gain,\n        panner: panner,\n        phaser: phaser,\n        recorder: recorder,\n        reverb: reverb,\n        script: script\n    };\n\n    return Object.freeze(api);\n}\n\nmodule.exports = Effect;\n",
    "'use strict';\n\nfunction Analyser(context, fftSize, smoothing, minDecibels, maxDecibels) {\n    fftSize = fftSize || 32;\n    var waveformData, frequencyData;\n\n    var node = context.createAnalyser();\n    node.fftSize = fftSize; // frequencyBinCount will be half this value\n\n    if(smoothing !== undefined) { node.smoothingTimeConstant = smoothing; }\n    if(minDecibels !== undefined) { node.minDecibels = minDecibels; }\n    if(maxDecibels !== undefined) { node.maxDecibels = maxDecibels; }\n\n    var updateFFTSize = function() {\n        if(fftSize !== node.fftSize || waveformData === undefined) {\n            waveformData = new Uint8Array(node.fftSize);\n            frequencyData = new Uint8Array(node.frequencyBinCount);\n            fftSize = node.fftSize;\n        }\n    };\n    updateFFTSize();\n\n    node.getWaveform = function() {\n        updateFFTSize();\n        this.getByteTimeDomainData(waveformData);\n        return waveformData;\n    };\n\n    node.getFrequencies = function() {\n        updateFFTSize();\n        this.getByteFrequencyData(frequencyData);\n        return frequencyData;\n    };\n\n    // map native properties of AnalyserNode\n    Object.defineProperties(node, {\n        'smoothing': {\n            // 0 to 1\n            get: function() { return node.smoothingTimeConstant; },\n            set: function(value) { node.smoothingTimeConstant = value; }\n        }\n    });\n\n    return node;\n}\n\nmodule.exports = Analyser;\n",
    "'use strict';\n\nfunction Distortion(context, amount) {\n\n    amount = amount || 1;\n    \n    var node = context.createWaveShaper();\n\n    // create waveShaper distortion curve from 0 to 1\n    node.update = function(value) {\n        amount = value;\n        var k = value * 100,\n            n = 22050,\n            curve = new Float32Array(n),\n            deg = Math.PI / 180,\n            x;\n\n        for (var i = 0; i < n; i++) {\n            x = i * 2 / n - 1;\n            curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n\n        this.curve = curve;\n    };\n\n    Object.defineProperties(node, {\n        'amount': {\n            get: function() { return amount; },\n            set: function(value) { this.update(value); }\n        }\n    });\n\n    if(amount !== undefined) {\n        node.update(amount);\n    }\n\n    return node;\n}\n\nmodule.exports = Distortion;\n",
    "'use strict';\n\nfunction Echo(context, delayTime, gainValue) {\n    var input = context.createGain();\n    var delay = context.createDelay();\n    var gain = context.createGain();\n    var output = context.createGain();\n\n    gain.gain.value = gainValue || 0.5;\n    delay.delayTime.value = delayTime || 0.5;\n\n    input.connect(delay);\n    input.connect(output);\n    delay.connect(gain);\n    gain.connect(delay);\n    gain.connect(output);\n\n    var node = input;\n    node.name = 'Echo';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        delay: {\n            get: function() { return delay.delayTime.value; },\n            set: function(value) { delay.delayTime.value = value; }\n        },\n        feedback: {\n            get: function() { return gain.gain.value; },\n            set: function(value) { gain.gain.value = value; }\n        }\n    });\n\n    return node;\n}\n\nmodule.exports = Echo;\n",
    "'use strict';\n\nfunction FakeContext() {\n\n    var startTime = Date.now();\n\n    var fn = function(){};\n\n    var param = function() {\n        return {\n            value: 1,\n            defaultValue: 1,\n            linearRampToValueAtTime: fn,\n            setValueAtTime: fn,\n            exponentialRampToValueAtTime: fn,\n            setTargetAtTime: fn,\n            setValueCurveAtTime: fn,\n            cancelScheduledValues: fn\n        };\n    };\n\n    var fakeNode = function() {\n        return {\n            connect:fn,\n            disconnect:fn,\n            // analyser\n            frequencyBinCount: 0,\n            smoothingTimeConstant: 0,\n            fftSize: 0,\n            minDecibels: 0,\n            maxDecibels: 0,\n            getByteTimeDomainData: fn,\n            getByteFrequencyData: fn,\n            getFloatTimeDomainData: fn,\n            getFloatFrequencyData: fn,\n            // gain\n            gain: param(),\n            // panner\n            panningModel: 0,\n            setPosition: fn,\n            setOrientation: fn,\n            setVelocity: fn,\n            distanceModel: 0,\n            refDistance: 0,\n            maxDistance: 0,\n            rolloffFactor: 0,\n            coneInnerAngle: 360,\n            coneOuterAngle: 360,\n            coneOuterGain: 0,\n            // filter:\n            type:0,\n            frequency: param(),\n            // delay\n            delayTime: param(),\n            // convolver\n            buffer: 0,\n            // compressor\n            threshold: param(),\n            knee: param(),\n            ratio: param(),\n            attack: param(),\n            release: param(),\n            reduction: param(),\n            // distortion\n            oversample: 0,\n            curve: 0,\n            // buffer\n            sampleRate: 1,\n            length: 0,\n            duration: 0,\n            numberOfChannels: 0,\n            getChannelData: function() {\n                return [];\n            },\n            copyFromChannel: fn,\n            copyToChannel: fn,\n            // listener\n            dopplerFactor: 0,\n            speedOfSound: 0,\n            // osc\n            start: fn\n        };\n    };\n\n    // ie9\n    if(!window.Uint8Array) {\n        window.Uint8Array = window.Float32Array = Array;\n    }\n    // if(!window.Uint8Array) {\n    //     window.Int8Array =\n    //     window.Uint8Array =\n    //     window.Uint8ClampedArray =\n    //     window.Int16Array =\n    //     window.Uint16Array =\n    //     window.Int32Array =\n    //     window.Uint32Array =\n    //     window.Float32Array =\n    //     window.Float64Array = Array;\n    // }\n\n    return {\n        createAnalyser: fakeNode,\n        createBuffer: fakeNode,\n        createBiquadFilter: fakeNode,\n        createChannelMerger: fakeNode,\n        createChannelSplitter: fakeNode,\n        createDynamicsCompressor: fakeNode,\n        createConvolver: fakeNode,\n        createDelay: fakeNode,\n        createGain: fakeNode,\n        createOscillator: fakeNode,\n        createPanner: fakeNode,\n        createScriptProcessor: fakeNode,\n        createWaveShaper: fakeNode,\n        listener: fakeNode(),\n        get currentTime() {\n            return (Date.now() - startTime) / 1000;\n        }\n    };\n}\n\nmodule.exports = FakeContext;\n",
    "'use strict';\n\nfunction Filter(context, type, frequency, quality, gain) {\n    // Frequency between 40Hz and half of the sampling rate\n    var minFrequency = 40;\n    var maxFrequency = context.sampleRate / 2;\n\n    var node = context.createBiquadFilter();\n    node.type = type;\n\n    if(frequency !== undefined) { node.frequency.value = frequency; }\n    if(quality !== undefined) { node.Q.value = quality; }\n    if(gain !== undefined) { node.gain.value = gain; }\n\n\n    var getFrequency = function(value) {\n        // Logarithm (base 2) to compute how many octaves fall in the range.\n        var numberOfOctaves = Math.log(maxFrequency / minFrequency) / Math.LN2;\n        // Compute a multiplier from 0 to 1 based on an exponential scale.\n        var multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));\n        // Get back to the frequency value between min and max.\n        return maxFrequency * multiplier;\n    };\n\n    node.update = function(frequency, gain) {\n        if(frequency !== undefined) {\n            this.frequency.value = frequency;\n        }\n        if(gain !== undefined) {\n            this.gain.value = gain;\n        }\n    };\n\n    node.setByPercent = function(percent, quality, gain) {\n        // set filter frequency based on value from 0 to 1\n        node.frequency.value = getFrequency(percent);\n        if(quality !== undefined) { node.Q.value = quality; }\n        if(gain !== undefined) { node.gain.value = gain; }\n    };\n\n    return node;\n}\n\nmodule.exports = Filter;\n",
    "'use strict';\n\nfunction MonoFlanger(context, config) {\n    var feedbackGain = config.feedback || 0.5,\n        delayTime = config.delay || 0.005,\n        lfoGain = config.gain || 0.002,\n        lfoFreq = config.frequency || 0.25;\n\n    var input = context.createGain();\n    var delay = context.createDelay();\n    var feedback = context.createGain();\n    var lfo = context.createOscillator();\n    var gain = context.createGain();\n    var output = context.createGain();\n\n    delay.delayTime.value = delayTime; // 5-25ms delay (0.005 > 0.025)\n    feedback.gain.value = feedbackGain; // 0 > 1\n\n    lfo.type = 'sine';\n    lfo.frequency.value = lfoFreq; // 0.05 > 5\n    gain.gain.value = lfoGain; // 0.0005 > 0.005\n\n    input.connect(output);\n    input.connect(delay);\n    delay.connect(output);\n    delay.connect(feedback);\n    feedback.connect(input);\n\n    lfo.connect(gain);\n    gain.connect(delay.delayTime);\n    lfo.start(0);\n    \n    var node = input;\n    node.name = 'Flanger';\n    node._output = output;\n    \n    Object.defineProperties(node, {\n        delay: {\n            get: function() { return delay.delayTime.value; },\n            set: function(value) { delay.delayTime.value = value; }\n        },\n        lfoFrequency: {\n            get: function() { return lfo.frequency.value; },\n            set: function(value) { lfo.frequency.value = value; }\n        },\n        lfoGain: {\n            get: function() { return gain.gain.value; },\n            set: function(value) { gain.gain.value = value; }\n        },\n        feedback: {\n            get: function() { return feedback.gain.value; },\n            set: function(value) { feedback.gain.value = value; }\n        }\n    });\n\n    return node;\n}\n\nfunction StereoFlanger(context, config) {\n    var feedbackGain = config.feedback || 0.5,\n        delayTime = config.delay || 0.003,\n        lfoGain = config.gain || 0.005,\n        lfoFreq = config.frequency || 0.5;\n\n    var input = context.createGain();\n    var splitter = context.createChannelSplitter(2);\n    var merger = context.createChannelMerger(2);\n    var feedbackL = context.createGain();\n    var feedbackR = context.createGain();\n    var lfo = context.createOscillator();\n    var lfoGainL = context.createGain();\n    var lfoGainR = context.createGain();\n    var delayL = context.createDelay();\n    var delayR = context.createDelay();\n    var output = context.createGain();\n\n    feedbackL.gain.value = feedbackR.gain.value = feedbackGain;\n    delayL.delayTime.value = delayR.delayTime.value = delayTime;\n\n    lfo.type = 'sine';\n    lfo.frequency.value = lfoFreq;\n    lfoGainL.gain.value = lfoGain;\n    lfoGainR.gain.value = 0 - lfoGain;\n\n    input.connect(splitter);\n    \n    splitter.connect(delayL, 0);\n    splitter.connect(delayR, 1);\n    \n    delayL.connect(feedbackL);\n    delayR.connect(feedbackR);\n\n    feedbackL.connect(delayR);\n    feedbackR.connect(delayL);\n\n    delayL.connect(merger, 0, 0);\n    delayR.connect(merger, 0, 1);\n\n    merger.connect(output);\n    input.connect(output);\n\n    lfo.connect(lfoGainL);\n    lfo.connect(lfoGainR);\n    lfoGainL.connect(delayL.delayTime);\n    lfoGainR.connect(delayR.delayTime);\n    lfo.start(0);\n\n    var node = input;\n    node.name = 'StereoFlanger';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        delay: {\n            get: function() { return delayL.delayTime.value; },\n            set: function(value) { delayL.delayTime.value = delayR.delayTime.value = value; }\n        },\n        lfoFrequency: {\n            get: function() { return lfo.frequency.value; },\n            set: function(value) { lfo.frequency.value = value; }\n        },\n        lfoGain: {\n            get: function() { return lfoGainL.gain.value; },\n            set: function(value) { lfoGainL.gain.value = lfoGainR.gain.value = value; }\n        },\n        feedback: {\n            get: function() { return feedbackL.gain.value; },\n            set: function(value) { feedbackL.gain.value = feedbackR.gain.value = value; }\n        }\n    });\n\n    return node;\n}\n\nfunction Flanger(context, config) {\n    config = config || {};\n    return config.stereo ? new StereoFlanger(context, config) : new MonoFlanger(context, config);\n}\n\nmodule.exports = Flanger;\n",
    "'use strict';\n\nfunction Panner(context) {\n    var node = context.createPanner();\n    // Default for stereo is 'HRTF' can also be 'equalpower'\n    node.panningModel = Panner.defaults.panningModel;\n\n    // Distance model and attributes\n    // Can be 'linear' 'inverse' 'exponential'\n    node.distanceModel = Panner.defaults.distanceModel;\n    node.refDistance = Panner.defaults.refDistance;\n    node.maxDistance = Panner.defaults.maxDistance;\n    node.rolloffFactor = Panner.defaults.rolloffFactor;\n    node.coneInnerAngle = Panner.defaults.coneInnerAngle;\n    node.coneOuterAngle = Panner.defaults.coneOuterAngle;\n    node.coneOuterGain = Panner.defaults.coneOuterGain;\n    // set to defaults (needed in Firefox)\n    node.setPosition(0, 0, 0);\n    node.setOrientation(0, 0, 0);\n\n    // simple vec3 object pool\n    var VecPool = {\n        pool: [],\n        get: function(x, y, z) {\n            var v = this.pool.length ? this.pool.pop() : { x: 0, y: 0, z: 0 };\n            // check if a vector has been passed in\n            if(x !== undefined && isNaN(x) && 'x' in x && 'y' in x && 'z' in x) {\n                v.x = x.x || 0;\n                v.y = x.y || 0;\n                v.z = x.z || 0;\n            }\n            else {\n                v.x = x || 0;\n                v.y = y || 0;\n                v.z = z || 0;\n            }\n            return v;\n        },\n        dispose: function(instance) {\n            this.pool.push(instance);\n        }\n    };\n\n    var globalUp = VecPool.get(0, 1, 0);\n\n    var setOrientation = function(node, fw) {\n        // set the orientation of the source (where the audio is coming from)\n\n        // calculate up vec ( up = (forward cross (0, 1, 0)) cross forward )\n        var up = VecPool.get(fw.x, fw.y, fw.z);\n        cross(up, globalUp);\n        cross(up, fw);\n        normalize(up);\n        normalize(fw);\n        // set the audio context's listener position to match the camera position\n        node.setOrientation(fw.x, fw.y, fw.z, up.x, up.y, up.z);\n\n        // return the vecs to the pool\n        VecPool.dispose(fw);\n        VecPool.dispose(up);\n    };\n\n    var setPosition = function(node, vec) {\n        node.setPosition(vec.x, vec.y, vec.z);\n        VecPool.dispose(vec);\n    };\n\n    var setVelocity = function(node, vec) {\n        node.setVelocity(vec.x, vec.y, vec.z);\n        VecPool.dispose(vec);\n    };\n\n    // cross product of 2 vectors\n    var cross = function ( a, b ) {\n        var ax = a.x, ay = a.y, az = a.z;\n        var bx = b.x, by = b.y, bz = b.z;\n        a.x = ay * bz - az * by;\n        a.y = az * bx - ax * bz;\n        a.z = ax * by - ay * bx;\n    };\n\n    // normalise to unit vector\n    var normalize = function (vec3) {\n        if(vec3.x === 0 && vec3.y === 0 && vec3.z === 0) {\n            return vec3;\n        }\n        var length = Math.sqrt( vec3.x * vec3.x + vec3.y * vec3.y + vec3.z * vec3.z );\n        var invScalar = 1 / length;\n        vec3.x *= invScalar;\n        vec3.y *= invScalar;\n        vec3.z *= invScalar;\n        return vec3;\n    };\n\n    // pan left to right with value from -1 to 1\n    // creates a nice curve with z\n    node.setX = function(value) {\n        var deg45 = Math.PI / 4,\n            deg90 = deg45 * 2,\n            x = value * deg45,\n            z = x + deg90;\n\n        if (z > deg90) {\n            z = Math.PI - z;\n        }\n\n        x = Math.sin(x);\n        z = Math.sin(z);\n\n        node.setPosition(x, 0, z);\n    };\n\n    /*var x = 0,\n        y = 0,\n        z = 0;\n\n    Object.defineProperties(node, {\n        'x': {\n            get: function() { return x; },\n            set: function(value) {\n                x = value;\n                node.setPosition(x, y, z);\n            }\n        }\n    });*/\n\n    // set the position the audio is coming from)\n    node.setSourcePosition = function(x, y, z) {\n        setPosition(node, VecPool.get(x, y, z));\n    };\n\n    // set the direction the audio is coming from)\n    node.setSourceOrientation = function(x, y, z) {\n        setOrientation(node, VecPool.get(x, y, z));\n    };\n\n    // set the veloicty of the audio source (if moving)\n    node.setSourceVelocity = function(x, y, z) {\n        setVelocity(node, VecPool.get(x, y, z));\n    };\n\n    // set the position of who or what is hearing the audio (could be camera or some character)\n    node.setListenerPosition = function(x, y, z) {\n        setPosition(context.listener, VecPool.get(x, y, z));\n    };\n\n    // set the position of who or what is hearing the audio (could be camera or some character)\n    node.setListenerOrientation = function(x, y, z) {\n        setOrientation(context.listener, VecPool.get(x, y, z));\n    };\n\n    // set the velocity (if moving) of who or what is hearing the audio (could be camera or some character)\n    node.setListenerVelocity = function(x, y, z) {\n        setVelocity(context.listener, VecPool.get(x, y, z));\n    };\n\n    // helper to calculate velocity\n    node.calculateVelocity = function(currentPosition, lastPosition, deltaTime) {\n        var dx = currentPosition.x - lastPosition.x;\n        var dy = currentPosition.y - lastPosition.y;\n        var dz = currentPosition.z - lastPosition.z;\n        return VecPool.get(dx / deltaTime, dy / deltaTime, dz / deltaTime);\n    };\n\n    node.setDefaults = function(defaults) {\n        Object.keys(defaults).forEach(function(key) {\n            Panner.defaults[key] = defaults[key];\n        });\n    };\n\n    return node;\n}\n\nPanner.defaults = {\n    panningModel: 'HRTF',\n    distanceModel: 'linear',\n    refDistance: 1,\n    maxDistance: 1000,\n    rolloffFactor: 1,\n    coneInnerAngle: 360,\n    coneOuterAngle: 0,\n    coneOuterGain: 0\n};\n\nmodule.exports = Panner;\n",
    "'use strict';\n\nfunction Phaser(context, config) {\n    config = config || {};\n    var stages = config.stages || 8,\n        lfoFrequency = config.frequency || 0.5,\n        lfoGainValue = config.gain || 300,\n        feedbackGain = config.feedback || 0.5,\n        filters = [],\n        filter;\n\n    var input = context.createGain();\n    var feedback = context.createGain();\n    var lfo = context.createOscillator();\n    var lfoGain = context.createGain();\n    var output = context.createGain();\n\n    feedback.gain.value = feedbackGain;\n\n    lfo.type = 'sine';\n    lfo.frequency.value = lfoFrequency;\n    lfoGain.gain.value = lfoGainValue;\n\n    for (var i = 0; i < stages; i++) {\n        filter = context.createBiquadFilter();\n        filter.type = 'allpass';\n        filter.frequency.value = 1000 * i;\n        //filter.Q.value = 10;\n        if(i > 0) {\n            filters[i-1].connect(filter);\n        }\n        lfoGain.connect(filter.frequency);\n\n        filters.push(filter);\n    }\n\n    var first = filters[0];\n    var last = filters[filters.length - 1];\n\n    input.connect(first);\n    input.connect(output);\n    last.connect(output);\n    last.connect(feedback);\n    feedback.connect(first);\n    lfo.connect(lfoGain);\n    lfo.start(0);\n\n    var node = input;\n    node.name = 'Phaser';\n    node._output = output;\n\n    Object.defineProperties(node, {\n        lfoFrequency: {\n            get: function() { return lfo.frequency.value; },\n            set: function(value) { lfo.frequency.value = value; }\n        },\n        lfoGain: {\n            get: function() { return lfoGain.gain.value; },\n            set: function(value) { lfoGain.gain.value = value; }\n        },\n        feedback: {\n            get: function() { return feedback.gain.value; },\n            set: function(value) { feedback.gain.value = value; }\n        }\n    });\n\n    return node;\n}\n\nmodule.exports = Phaser;\n",
    "'use strict';\n\nfunction Recorder(context, passThrough) {\n    var buffersL = [],\n        buffersR = [],\n        startedAt = 0,\n        stoppedAt = 0;\n\n    var input = context.createGain();\n    var output = context.createGain();\n    var script = context.createScriptProcessor(4096, 2, 2);\n    \n    input.connect(script);\n    script.connect(context.destination);\n    script.connect(output);\n\n    var node = input;\n    node.name = 'Recorder';\n    node._output = output;\n\n    node.isRecording = false;\n\n    var getBuffer = function() {\n        if(!buffersL.length) {\n            return context.createBuffer(2, 4096, context.sampleRate);\n        }\n        var buffer = context.createBuffer(2, buffersL.length, context.sampleRate);\n        buffer.getChannelData(0).set(buffersL);\n        buffer.getChannelData(1).set(buffersR);\n        return buffer;\n    };\n\n    node.start = function() {\n        buffersL.length = 0;\n        buffersR.length = 0;\n        startedAt = context.currentTime;\n        stoppedAt = 0;\n        this.isRecording = true;\n    };\n\n    node.stop = function() {\n        stoppedAt = context.currentTime;\n        this.isRecording = false;\n        return getBuffer();\n    };\n\n    node.getDuration = function() {\n        if(!this.isRecording) {\n            return stoppedAt - startedAt;\n        }\n        return context.currentTime - startedAt;\n    };\n\n    script.onaudioprocess = function (event) {\n        var inputL = event.inputBuffer.getChannelData(0),\n            inputR = event.inputBuffer.getChannelData(0),\n            outputL = event.outputBuffer.getChannelData(0),\n            outputR = event.outputBuffer.getChannelData(0);\n\n        if(passThrough) {\n            outputL.set(inputL);\n            outputR.set(inputR);\n        }\n\n        if(node.isRecording) {\n            for (var i = 0; i < inputL.length; i++) {\n                buffersL.push(inputL[i]);\n                buffersR.push(inputR[i]);\n            }\n        }\n    };\n\n    return node;\n}\n\nmodule.exports = Recorder;\n",
    "'use strict';\n\nfunction Reverb(context, config) {\n    config = config || {};\n\n    var time = config.time || 1,\n        decay = config.decay || 5,\n        reverse = !!config.reverse,\n        rate = context.sampleRate,\n        length,\n        impulseResponse;\n\n    var input = context.createGain();\n    var reverb = context.createConvolver();\n    var output = context.createGain();\n\n    input.connect(reverb);\n    input.connect(output);\n    reverb.connect(output);\n\n    var node = input;\n    node.name = 'Reverb';\n    node._output = output;\n\n    node.update = function(config) {\n        if(config.time !== undefined) {\n            time = config.time;\n            length = rate * time;\n            impulseResponse = context.createBuffer(2, length, rate);\n        }\n        if(config.decay !== undefined) {\n            decay = config.decay;\n        }\n        if(config.reverse !== undefined) {\n            reverse = config.reverse;\n        }\n\n        var left = impulseResponse.getChannelData(0),\n            right = impulseResponse.getChannelData(1),\n            n, e;\n\n        for (var i = 0; i < length; i++) {\n            n = reverse ? length - i : i;\n            e = Math.pow(1 - n / length, decay);\n            left[i] = (Math.random() * 2 - 1) * e;\n            right[i] = (Math.random() * 2 - 1) * e;\n        }\n\n        reverb.buffer = impulseResponse;\n    };\n\n    node.update({\n        time: time,\n        decay: decay,\n        reverse: reverse\n    });\n\n    Object.defineProperties(node, {\n        time: {\n            get: function() { return time; },\n            set: function(value) {\n                console.log('set time:', value);\n                if(value === time) { return; }\n                this.update({time: time});\n            }\n        },\n        decay: {\n            get: function() { return decay; },\n            set: function(value) {\n                if(value === decay) { return; }\n                this.update({decay: decay});\n            }\n        },\n        reverse: {\n            get: function() { return reverse; },\n            set: function(value) {\n                if(value === reverse) { return; }\n                this.update({reverse: !!value});\n            }\n        }\n    });\n\n    return node;\n}\n\nmodule.exports = Reverb;\n",
    "'use strict';\n\nvar Effect = require(3);\n\nfunction Group(context, destination) {\n    this._sounds = [];\n    this._context = context;\n    this._effect = new Effect(this._context);\n    this._gain = this._effect.gain();\n    if(this._context) {\n        this._effect.setSource(this._gain);\n        this._effect.setDestination(destination || this._context.destination);\n    }\n}\n\n/*\n * Add / remove\n */\n\nGroup.prototype.add = function(sound) {\n    sound.gain.disconnect();\n    sound.gain.connect(this._gain);\n\n    this._sounds.push(sound);\n\n    sound.once('destroyed', this.remove.bind(this));\n};\n\nGroup.prototype.remove = function(soundOrId) {\n    this._sounds.some(function(sound, index, sounds) {\n        if(sound === soundOrId || sound.id === soundOrId) {\n            sounds.splice(index, 1);\n            return true;\n        }\n    });\n};\n\n/*\n * Controls\n */\n\nGroup.prototype.play = function(delay, offset) {\n    this._sounds.forEach(function(sound) {\n        sound.play(delay, offset);\n    });\n};\n\nGroup.prototype.pause = function() {\n    this._sounds.forEach(function(sound) {\n        if(sound.playing) {\n            sound.pause();\n        }\n    });\n};\n\nGroup.prototype.resume = function() {\n    this._sounds.forEach(function(sound) {\n        if(sound.paused) {\n            sound.play();\n        }\n    });\n};\n\nGroup.prototype.stop = function() {\n    this._sounds.forEach(function(sound) {\n        sound.stop();\n    });\n};\n\nGroup.prototype.seek = function(percent) {\n    this._sounds.forEach(function(sound) {\n        sound.seek(percent);\n    });\n};\n\nGroup.prototype.mute = function() {\n    this._preMuteVolume = this.volume;\n    this.volume = 0;\n};\n\nGroup.prototype.unMute = function() {\n    this.volume = this._preMuteVolume || 1;\n};\n\nGroup.prototype.fade = function(volume, duration) {\n    if(this._context) {\n        var param = this._gain.gain;\n        var time = this._context.currentTime;\n\n        param.cancelScheduledValues(time);\n        param.setValueAtTime(param.value, time);\n        // param.setValueAtTime(volume, time + duration);\n        param.linearRampToValueAtTime(volume, time + duration);\n        // param.setTargetAtTime(volume, time, duration);\n        // param.exponentialRampToValueAtTime(Math.max(volume, 0.0001), time + duration);\n    }\n    else {\n        this._sounds.forEach(function(sound) {\n            sound.fade(volume, duration);\n        });\n    }\n\n    return this;\n};\n\n/*\n * Destroy\n */\n\nGroup.prototype.destroy = function() {\n    // while(this._sounds.length) {\n    //     this._sounds.pop().destroy();\n    // }\n    this._sounds.forEach(function(sound) {\n        sound.destroy();\n    });\n};\n\n\n/*\n * Getters & Setters\n */\n\nObject.defineProperties(Group.prototype, {\n    effect: {\n        get: function() {\n            return this._effect;\n        }\n    },\n    gain: {\n        get: function() {\n            return this._gain;\n        }\n    },\n    sounds: {\n        get: function() {\n            return this._sounds;\n        }\n    },\n    volume: {\n        get: function() {\n            return this._gain.gain.value;\n        },\n        set: function(value) {\n            if(isNaN(value)) { return; }\n\n            if(this._context) {\n                this._gain.gain.cancelScheduledValues(this._context.currentTime);\n                this._gain.gain.value = value;\n                this._gain.gain.setValueAtTime(value, this._context.currentTime);\n            }\n            else {\n                this._gain.gain.value = value;\n            }\n            this._sounds.forEach(function(sound) {\n                if (!sound.context) {\n                    sound.volume = value;\n                }\n            });\n        }\n    }\n});\n\nmodule.exports = Group;\n",
    "'use strict';\n\nvar BufferSource = require(16),\n    Effect = require(3),\n    Emitter = require(22),\n    file = require(23),\n    Loader = require(24),\n    MediaSource = require(17),\n    MicrophoneSource = require(18),\n    OscillatorSource = require(19),\n    ScriptSource = require(20);\n\nfunction Sound(context, destination) {\n    var id,\n        data,\n        effect = new Effect(context),\n        gain = effect.gain(),\n        isTouchLocked = false,\n        loader,\n        loop = false,\n        playbackRate = 1,\n        playWhenReady,\n        source,\n        api;\n\n    if(context) {\n        effect.setDestination(gain);\n        gain.connect(destination || context.destination);\n    }\n\n    /*\n     * Load\n     */\n\n    var load = function(config) {\n        var url = file.getSupportedFile(config.url || config);\n\n        if(source && data && data.tagName) {\n            source.load(url);\n        }\n        else {\n            loader = loader || new Loader(url);\n            loader.audioContext = !!config.asMediaElement ? null : context;\n            loader.isTouchLocked = isTouchLocked;\n            loader.once('loaded', function(file) {\n                createSource(file);\n                api.emit('loaded');\n            });\n            loader.once('error', function(err) {\n                console.warn.call(console, err);\n            });\n        }\n        return api;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay, offset) {\n        if(!source || isTouchLocked) {\n            playWhenReady = function() {\n                if (source) {\n                    play(delay, offset);\n                }\n            };\n            return api;\n        }\n        playWhenReady = null;\n        effect.setSource(source.sourceNode);\n        if(source.hasOwnProperty('loop')) {\n            source.loop = loop;\n        }\n\n        // update volume needed for no webaudio\n        if(!context) { api.volume = gain.gain.value; }\n\n        source.play(delay, offset);\n\n        return api;\n    };\n\n    var pause = function() {\n        if(!source) { return api; }\n        source.pause();\n        return api;\n    };\n\n    var stop = function() {\n        if(!source) { return api; }\n        source.stop();\n        return api;\n    };\n\n    var seek = function(percent) {\n        if(!source) { return api; }\n        stop();\n        play(0, source.duration * percent);\n        return api;\n    };\n\n    var fade = function(volume, duration) {\n        if(!source) { return api; }\n\n        if(context) {\n            var  param = gain.gain;\n            var time = context.currentTime;\n            param.cancelScheduledValues(time);\n            param.setValueAtTime(param.value, time);\n            param.linearRampToValueAtTime(volume, time + duration);\n        }\n        else if(typeof source.fade === 'function') {\n            source.fade(volume, duration);\n        }\n\n        return api;\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        if(source) { source.destroy(); }\n        if(effect) { effect.destroy(); }\n        if(gain) { gain.disconnect(); }\n        if(loader) { loader.destroy(); }\n        api.off('ended');\n        gain = null;\n        context = null;\n        data = null;\n        playWhenReady = null;\n        source = null;\n        effect = null;\n        loader = null;\n        api.emit('destroyed', api);\n        api.off('destroyed');\n    };\n\n    /*\n     * Create source\n     */\n\n    var createSource = function(value) {\n        data = value;\n\n        if(file.isAudioBuffer(data)) {\n            source = new BufferSource(data, context, function() {\n                api.emit('ended');\n            });\n        }\n        else if(file.isMediaElement(data)) {\n            source = new MediaSource(data, context, function() {\n                api.emit('ended');\n            });\n        }\n        else if(file.isMediaStream(data)) {\n            source = new MicrophoneSource(data, context);\n        }\n        else if(file.isOscillatorType(data)) {\n            source = new OscillatorSource(data, context);\n        }\n        else if(file.isScriptConfig(data)) {\n            source = new ScriptSource(data, context);\n        }\n        else {\n            throw new Error('Cannot detect data type: ' + data);\n        }\n\n        effect.setSource(source.sourceNode);\n\n        if(playWhenReady) {\n            playWhenReady();\n        }\n    };\n\n    api = Object.create(Emitter.prototype, {\n        constructor: Sound,\n\n        _events: {\n            value: {}\n        },\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        load: {\n            value: load\n        },\n        seek: {\n            value: seek\n        },\n        stop: {\n            value: stop\n        },\n        fade: {\n            value: fade\n        },\n        destroy: {\n            value: destroy\n        },\n        context: {\n            value: context\n        },\n        currentTime: {\n            get: function() {\n                return source ? source.currentTime : 0;\n            },\n            set: function(value) {\n                stop();\n                play(0, value);\n            }\n        },\n        data: {\n            get: function() {\n                return data;\n            },\n            set : function(value) {\n                if(!value) { return; }\n                createSource(value);\n            }\n        },\n        duration: {\n            get: function() {\n                return source ? source.duration : 0;\n            }\n        },\n        effect: {\n            value: effect\n        },\n        ended: {\n            get: function() {\n                // return source ? source.ended : false;\n                return !!source && source.ended;\n            }\n        },\n        frequency: {\n            get: function() {\n                return source ? source.frequency : 0;\n            },\n            set: function(value) {\n                if(source) {\n                    source.frequency = value;\n                }\n            }\n        },\n        gain: {\n            value: gain\n        },\n        id: {\n            get: function() {\n                return id;\n            },\n            set: function(value) {\n                id = value;\n            }\n        },\n        isTouchLocked: {\n            set: function(value) {\n                isTouchLocked = value;\n                if(loader) {\n                    loader.isTouchLocked = value;\n                }\n                if(!value && playWhenReady) {\n                    playWhenReady();\n                }\n            }\n        },\n        loader: {\n            get: function() {\n                return loader;\n            }\n        },\n        loop: {\n            get: function() {\n                return loop;\n            },\n            set: function(value) {\n                loop = !!value;\n                if(source && source.hasOwnProperty('loop')) {\n                  source.loop = loop;\n                }\n            }\n        },\n        paused: {\n            get: function() {\n                // return source ? source.paused : false;\n                return !!source && source.paused;\n            }\n        },\n        playing: {\n            get: function() {\n                // return source ? source.playing : false;\n                return !!source && source.playing;\n            }\n        },\n        playbackRate: {\n            get: function() {\n                return playbackRate;\n            },\n            set: function(value) {\n                playbackRate = value;\n                if(source) {\n                  source.playbackRate = playbackRate;\n                }\n            }\n        },\n        progress: {\n            get: function() {\n                return source ? source.progress : 0;\n            }\n        },\n        volume: {\n            get: function() {\n                if(context) {\n                    return gain.gain.value;\n                }\n                if(source && source.hasOwnProperty('volume')) {\n                    return source.volume;\n                }\n                return 1;\n            },\n            set: function(value) {\n                if(isNaN(value)) { return; }\n\n                var param = gain.gain;\n\n                if(context) {\n                    var time = context.currentTime;\n                    param.cancelScheduledValues(time);\n                    param.value = value;\n                    param.setValueAtTime(value, time);\n                }\n                else {\n                    param.value = value;\n\n                    if(source && source.hasOwnProperty('volume')) {\n                        source.volume = value;\n                    }\n                }\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = Sound;\n",
    "'use strict';\n\nfunction BufferSource(buffer, context, onEnded) {\n    var ended = false,\n        endedCallback = onEnded,\n        loop = false,\n        paused = false,\n        pausedAt = 0,\n        playbackRate = 1,\n        playing = false,\n        sourceNode = null,\n        startedAt = 0,\n        api = {};\n\n    var createSourceNode = function() {\n        if(!sourceNode && context) {\n            sourceNode = context.createBufferSource();\n            sourceNode.buffer = buffer;\n        }\n        return sourceNode;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay, offset) {\n        if(playing) { return; }\n\n        delay = delay ? context.currentTime + delay : 0;\n        offset = offset || 0;\n        if(offset) { pausedAt = 0; }\n        if(pausedAt) { offset = pausedAt; }\n        while(offset > api.duration) { offset = offset % api.duration; }\n\n        createSourceNode();\n        sourceNode.loop = loop;\n        sourceNode.onended = endedHandler;\n        sourceNode.start(delay, offset);\n        sourceNode.playbackRate.value = playbackRate;\n\n        startedAt = context.currentTime - offset;\n        ended = false;\n        paused = false;\n        pausedAt = 0;\n        playing = true;\n    };\n\n    var pause = function() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    };\n\n    var stop = function() {\n        if(sourceNode) {\n            sourceNode.onended = null;\n            try {\n                sourceNode.disconnect();\n                sourceNode.stop(0);\n            } catch(e) {}\n            sourceNode = null;\n        }\n\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    };\n\n    /*\n     * Ended handler\n     */\n\n    var endedHandler = function() {\n        stop();\n        ended = true;\n        if(typeof endedCallback === 'function') {\n            endedCallback(api);\n        }\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        stop();\n        buffer = null;\n        context = null;\n        endedCallback = null;\n        sourceNode = null;\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        stop: {\n            value: stop\n        },\n        destroy: {\n            value: destroy\n        },\n        currentTime: {\n            get: function() {\n                if(pausedAt) {\n                    return pausedAt;\n                }\n                if(startedAt) {\n                    var time = context.currentTime - startedAt;\n                    if(time > api.duration) {\n                        time = time % api.duration;\n                    }\n                    return time;\n                }\n                return 0;\n            }\n        },\n        duration: {\n            get: function() {\n                return buffer ? buffer.duration : 0;\n            }\n        },\n        ended: {\n            get: function() {\n                return ended;\n            }\n        },\n        loop: {\n            get: function() {\n                return loop;\n            },\n            set: function(value) {\n                loop = !!value;\n            }\n        },\n        paused: {\n            get: function() {\n                return paused;\n            }\n        },\n        playbackRate: {\n            get: function() {\n                return playbackRate;\n            },\n            set: function(value) {\n                playbackRate = value;\n                if(sourceNode) {\n                    sourceNode.playbackRate.value = playbackRate;\n                }\n            }\n        },\n        playing: {\n            get: function() {\n                return playing;\n            }\n        },\n        progress: {\n            get: function() {\n                return api.duration ? api.currentTime / api.duration : 0;\n            }\n        },\n        sourceNode: {\n            get: function() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = BufferSource;\n",
    "'use strict';\n\nfunction MediaSource(el, context, onEnded) {\n    var ended = false,\n        endedCallback = onEnded,\n        delayTimeout,\n        fadeTimeout,\n        loop = false,\n        paused = false,\n        playbackRate = 1,\n        playing = false,\n        sourceNode = null,\n        api = {};\n\n    var createSourceNode = function() {\n        if(!sourceNode && context) {\n            sourceNode = context.createMediaElementSource(el);\n        }\n        return sourceNode;\n    };\n\n    /*\n     * Load\n     */\n\n    var load = function(url) {\n        el.src = url;\n        el.load();\n        ended = false;\n        paused = false;\n        playing = false;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay, offset) {\n        clearTimeout(delayTimeout);\n\n        el.playbackRate = playbackRate;\n\n        if(offset) {\n            el.currentTime = offset;\n        }\n\n        if(delay) {\n            delayTimeout = setTimeout(play, delay);\n        }\n        else {\n            // el.load();\n            el.play();\n        }\n\n        ended = false;\n        paused = false;\n        playing = true;\n\n        el.removeEventListener('ended', endedHandler);\n        el.addEventListener('ended', endedHandler, false);\n\n        if(el.readyState < 4) {\n            el.removeEventListener('canplaythrough', readyHandler);\n            el.addEventListener('canplaythrough', readyHandler, false);\n            el.load();\n            el.play();\n        }\n    };\n\n    var readyHandler = function() {\n        el.removeEventListener('canplaythrough', readyHandler);\n        if(playing) {\n            el.play();\n        }\n    };\n\n    var pause = function() {\n        clearTimeout(delayTimeout);\n\n        if(!el) { return; }\n\n        el.pause();\n        playing = false;\n        paused = true;\n    };\n\n    var stop = function() {\n        clearTimeout(delayTimeout);\n\n        if(!el) { return; }\n\n        el.pause();\n\n        try {\n            el.currentTime = 0;\n            // fixes bug where server doesn't support seek:\n            if(el.currentTime > 0) { el.load(); }\n        } catch(e) {}\n\n        playing = false;\n        paused = false;\n    };\n\n    /*\n     * Fade for no webaudio\n     */\n\n    var fade = function(volume, duration) {\n        if(!el) { return api; }\n        if(context) { return api; }\n\n        function ramp(value, step) {\n            fadeTimeout = setTimeout(function() {\n                el.volume = el.volume + ( value - el.volume ) * 0.2;\n                if(Math.abs(el.volume - value) > 0.05) {\n                    return ramp(value, step);\n                }\n                el.volume = value;\n            }, step * 1000);\n        }\n\n        window.clearTimeout(fadeTimeout);\n        ramp(volume, duration / 10);\n\n        return api;\n    };\n\n    /*\n     * Ended handler\n     */\n\n    var endedHandler = function() {\n        ended = true;\n        paused = false;\n        playing = false;\n\n        if(loop) {\n            el.currentTime = 0;\n            // fixes bug where server doesn't support seek:\n            if(el.currentTime > 0) { el.load(); }\n            play();\n        } else if(typeof endedCallback === 'function') {\n            endedCallback(api);\n        }\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        el.removeEventListener('ended', endedHandler);\n        el.removeEventListener('canplaythrough', readyHandler);\n        stop();\n        el = null;\n        context = null;\n        endedCallback = null;\n        sourceNode = null;\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        play: {\n            value: play\n        },\n        pause: {\n            value: pause\n        },\n        stop: {\n            value: stop\n        },\n        load: {\n            value: load\n        },\n        fade: {\n            value: fade\n        },\n        destroy: {\n            value: destroy\n        },\n        currentTime: {\n            get: function() {\n                return el ? el.currentTime : 0;\n            }\n        },\n        duration: {\n            get: function() {\n                return el ? el.duration : 0;\n            }\n        },\n        ended: {\n            get: function() {\n                return ended;\n            }\n        },\n        loop: {\n            get: function() {\n                return loop;\n            },\n            set: function(value) {\n                loop = !!value;\n            }\n        },\n        paused: {\n            get: function() {\n                return paused;\n            }\n        },\n        playbackRate: {\n            get: function() {\n                return playbackRate;\n            },\n            set: function(value) {\n                playbackRate = value;\n                if(el) {\n                    el.playbackRate = playbackRate;\n                }\n            }\n        },\n        playing: {\n            get: function() {\n                return playing;\n            }\n        },\n        progress: {\n            get: function() {\n                return el && el.duration ? el.currentTime / el.duration : 0;\n            }\n        },\n        sourceNode: {\n            get: function() {\n                return createSourceNode();\n            }\n        },\n        volume: {\n            get: function() {\n                return el ? el.volume : 1;\n            },\n            set: function(value) {\n                window.clearTimeout(fadeTimeout);\n                if(el) {\n                    el.volume = value;\n                }\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = MediaSource;\n",
    "'use strict';\n\nfunction MicrophoneSource(stream, context) {\n    var ended = false,\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null, // MicrophoneSourceNode\n        startedAt = 0;\n\n    var createSourceNode = function() {\n        if(!sourceNode && context) {\n            sourceNode = context.createMediaStreamSource(stream);\n            // HACK: stops moz garbage collection killing the stream\n            // see https://support.mozilla.org/en-US/questions/984179\n            if(navigator.mozGetUserMedia) {\n                window.mozHack = sourceNode;\n            }\n        }\n        return sourceNode;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay) {\n        delay = delay ? context.currentTime + delay : 0;\n\n        createSourceNode();\n        sourceNode.start(delay);\n\n        startedAt = context.currentTime - pausedAt;\n        ended = false;\n        playing = true;\n        paused = false;\n        pausedAt = 0;\n    };\n\n    var pause = function() {\n        var elapsed = context.currentTime - startedAt;\n        stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    };\n\n    var stop = function() {\n        if(sourceNode) {\n            try {\n                sourceNode.stop(0);\n            } catch(e) {}\n            sourceNode = null;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        stop();\n        context = null;\n        sourceNode = null;\n        stream = null;\n        window.mozHack = null;\n    };\n\n    /*\n     * Api\n     */\n\n    var api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy,\n\n        duration: 0,\n        progress: 0\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function() {\n                if(pausedAt) {\n                    return pausedAt;\n                }\n                if(startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        ended: {\n            get: function() {\n                return ended;\n            }\n        },\n        paused: {\n            get: function() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function() {\n                return playing;\n            }\n        },\n        sourceNode: {\n            get: function() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = MicrophoneSource;\n",
    "'use strict';\n\nfunction OscillatorSource(type, context) {\n    var ended = false,\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null, // OscillatorSourceNode\n        startedAt = 0,\n        frequency = 200,\n        api;\n\n    var createSourceNode = function() {\n        if(!sourceNode && context) {\n            sourceNode = context.createOscillator();\n            sourceNode.type = type;\n            sourceNode.frequency.value = frequency;\n        }\n        return sourceNode;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay) {\n        delay = delay || 0;\n        if(delay) { delay = context.currentTime + delay; }\n\n        createSourceNode();\n        sourceNode.start(delay);\n\n        if(pausedAt) {\n            startedAt = context.currentTime - pausedAt;\n        }\n        else {\n            startedAt = context.currentTime;\n        }\n\n        ended = false;\n        playing = true;\n        paused = false;\n        pausedAt = 0;\n    };\n\n    var pause = function() {\n        var elapsed = context.currentTime - startedAt;\n        this.stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    };\n\n    var stop = function() {\n        if(sourceNode) {\n            try {\n                sourceNode.stop(0);\n            } catch(e) {}\n            sourceNode = null;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        this.stop();\n        context = null;\n        sourceNode = null;\n    };\n\n    /*\n     * Api\n     */\n\n    api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function() {\n                if(pausedAt) {\n                    return pausedAt;\n                }\n                if(startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        duration: {\n            value: 0\n        },\n        ended: {\n            get: function() {\n                return ended;\n            }\n        },\n        frequency: {\n            get: function() {\n                return frequency;\n            },\n            set: function(value) {\n                frequency = value;\n                if(sourceNode) {\n                    sourceNode.frequency.value = value;\n                }\n            }\n        },\n        paused: {\n            get: function() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function() {\n                return playing;\n            }\n        },\n        progress: {\n            value: 0\n        },\n        sourceNode: {\n            get: function() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = OscillatorSource;\n",
    "'use strict';\n\nfunction ScriptSource(data, context) {\n    var bufferSize = data.bufferSize || 1024,\n        channels = data.channels || 1,\n        ended = false,\n        onProcess = data.callback.bind(data.thisArg || this),\n        paused = false,\n        pausedAt = 0,\n        playing = false,\n        sourceNode = null, // ScriptSourceNode\n        startedAt = 0,\n        api;\n\n    var createSourceNode = function() {\n        if(!sourceNode && context) {\n            sourceNode = context.createScriptProcessor(bufferSize, 0, channels);\n        }\n        return sourceNode;\n    };\n\n    /*\n     * Controls\n     */\n\n    var play = function(delay) {\n        delay = delay ? context.currentTime + delay : 0;\n\n        createSourceNode();\n        sourceNode.onaudioprocess = onProcess;\n\n        startedAt = context.currentTime - pausedAt;\n        ended = false;\n        paused = false;\n        pausedAt = 0;\n        playing = true;\n    };\n\n    var pause = function() {\n        var elapsed = context.currentTime - startedAt;\n        this.stop();\n        pausedAt = elapsed;\n        playing = false;\n        paused = true;\n    };\n\n    var stop = function() {\n        if(sourceNode) {\n            sourceNode.onaudioprocess = onPaused;\n        }\n        ended = true;\n        paused = false;\n        pausedAt = 0;\n        playing = false;\n        startedAt = 0;\n    };\n\n    var onPaused = function(event) {\n        var buffer = event.outputBuffer;\n        for (var i = 0, l = buffer.numberOfChannels; i < l; i++) {\n            var channel = buffer.getChannelData(i);\n            for (var j = 0, len = channel.length; j < len; j++) {\n                channel[j] = 0;\n            }\n        }\n    };\n\n    /*\n     * Destroy\n     */\n\n    var destroy = function() {\n        this.stop();\n        context = null;\n        onProcess = null;\n        sourceNode = null;\n    };\n\n    /*\n     * Api\n     */\n\n    api = {\n        play: play,\n        pause: pause,\n        stop: stop,\n        destroy: destroy,\n\n        duration: 0,\n        progress: 0\n    };\n\n    /*\n     * Getters & Setters\n     */\n\n    Object.defineProperties(api, {\n        currentTime: {\n            get: function() {\n                if(pausedAt) {\n                    return pausedAt;\n                }\n                if(startedAt) {\n                    return context.currentTime - startedAt;\n                }\n                return 0;\n            }\n        },\n        ended: {\n            get: function() {\n                return ended;\n            }\n        },\n        paused: {\n            get: function() {\n                return paused;\n            }\n        },\n        playing: {\n            get: function() {\n                return playing;\n            }\n        },\n        sourceNode: {\n            get: function() {\n                return createSourceNode();\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nmodule.exports = ScriptSource;\n",
    "'use strict';\n\nvar Browser = {};\n\nBrowser.handlePageVisibility = function(onHidden, onShown) {\n    var hidden,\n        visibilityChange;\n\n    if (typeof document.hidden !== 'undefined') {\n        hidden = 'hidden';\n        visibilityChange = 'visibilitychange';\n    }\n    else if (typeof document.mozHidden !== 'undefined') {\n        hidden = 'mozHidden';\n        visibilityChange = 'mozvisibilitychange';\n    }\n    else if (typeof document.msHidden !== 'undefined') {\n        hidden = 'msHidden';\n        visibilityChange = 'msvisibilitychange';\n    }\n    else if (typeof document.webkitHidden !== 'undefined') {\n        hidden = 'webkitHidden';\n        visibilityChange = 'webkitvisibilitychange';\n    }\n\n    function onChange() {\n        if (document[hidden]) {\n            onHidden();\n        }\n        else {\n            onShown();\n        }\n    }\n\n    if(visibilityChange !== undefined) {\n        document.addEventListener(visibilityChange, onChange, false);\n    }\n};\n\nBrowser.handleTouchLock = function(context, onUnlock) {\n    var ua = navigator.userAgent,\n        locked = !!ua.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|SymbianOS/i);\n\n    var unlock = function() {\n        document.body.removeEventListener('touchstart', unlock);\n\n        if(context) {\n            var buffer = context.createBuffer(1, 1, 22050);\n            var source = context.createBufferSource();\n            source.buffer = buffer;\n            source.connect(context.destination);\n            source.start(0);\n            source.disconnect();\n        }\n\n        onUnlock();\n    };\n\n    if(locked) {\n        document.body.addEventListener('touchstart', unlock, false);\n    }\n    return locked;\n};\n\nmodule.exports = Browser;\n",
    "'use strict';\n\nvar EventEmitter = require(2).EventEmitter;\n\nfunction Emitter() {\n    EventEmitter.call(this);\n}\n\nEmitter.prototype = Object.create(EventEmitter.prototype);\nEmitter.prototype.constructor = Emitter;\n\nEmitter.prototype.off = function(type, listener) {\n    if (listener) {\n        return this.removeListener(type, listener);\n    }\n    return this.removeAllListeners(type);\n};\n\nmodule.exports = Emitter;\n",
    "'use strict';\n\nvar File = {\n    extensions: [],\n    canPlay: {}\n};\n\n/*\n * Initial tests\n */\n\nvar tests = [\n    { ext: 'ogg', type: 'audio/ogg; codecs=\"vorbis\"' },\n    { ext: 'mp3', type: 'audio/mpeg;' },\n    { ext: 'opus', type: 'audio/ogg; codecs=\"opus\"' },\n    { ext: 'wav', type: 'audio/wav; codecs=\"1\"' },\n    { ext: 'm4a', type: 'audio/x-m4a;' },\n    { ext: 'm4a', type: 'audio/aac;' }\n];\n\nvar el = document.createElement('audio');\nif(el) {\n    tests.forEach(function(test) {\n        var canPlayType = !!el.canPlayType(test.type);\n        if(canPlayType) {\n            File.extensions.push(test.ext);\n        }\n        File.canPlay[test.ext] = canPlayType;\n    });\n    el = null;\n}\n\n/*\n * find a supported file\n */\n\nFile.getFileExtension = function(url) {\n    // from DataURL\n    if(url.slice(0, 5) === 'data:') {\n        var match = url.match(/data:audio\\/(ogg|mp3|opus|wav|m4a)/i);\n        if(match && match.length > 1) {\n            return match[1].toLowerCase();\n        }\n    }\n    // from Standard URL\n    url = url.split('?')[0];\n    url = url.slice(url.lastIndexOf('/') + 1);\n\n    var a = url.split('.');\n    if(a.length === 1 || (a[0] === '' && a.length === 2)) {\n        return '';\n    }\n    return a.pop().toLowerCase();\n};\n\nFile.getSupportedFile = function(fileNames) {\n    var name;\n\n    if(Array.isArray(fileNames)) {\n        // if array get the first one that works\n        fileNames.some(function(item) {\n            name = item;\n            var ext = this.getFileExtension(item);\n            return this.extensions.indexOf(ext) > -1;\n        }, this);\n    }\n    else if(typeof fileNames === 'object') {\n        // if not array and is object\n        Object.keys(fileNames).some(function(key) {\n            name = fileNames[key];\n            var ext = this.getFileExtension(name);\n            return this.extensions.indexOf(ext) > -1;\n        }, this);\n    }\n    // if string just return\n    return name || fileNames;\n};\n\n/*\n * infer file types\n */\n\nFile.isAudioBuffer = function(data) {\n    return !!(data &&\n              window.AudioBuffer &&\n              data instanceof window.AudioBuffer);\n};\n\nFile.isMediaElement = function(data) {\n    return !!(data &&\n              window.HTMLMediaElement &&\n              data instanceof window.HTMLMediaElement);\n};\n\nFile.isMediaStream = function(data) {\n    return !!(data &&\n              typeof data.getAudioTracks === 'function' &&\n              data.getAudioTracks().length &&\n              window.MediaStreamTrack &&\n              data.getAudioTracks()[0] instanceof window.MediaStreamTrack);\n};\n\nFile.isOscillatorType = function(data) {\n    return !!(data && typeof data === 'string' &&\n             (data === 'sine' || data === 'square' ||\n              data === 'sawtooth' || data === 'triangle'));\n};\n\nFile.isScriptConfig = function(data) {\n    return !!(data && typeof data === 'object' &&\n              data.bufferSize && data.channels && data.callback);\n};\n\nFile.isURL = function(data) {\n    return !!(data && typeof data === 'string' &&\n             (data.indexOf('.') > -1 || data.slice(0, 5) === 'data:'));\n};\n\nFile.containsURL = function(config) {\n    if(!config) { return false; }\n    // string, array or object with url property that is string or array\n    var url = config.url || config;\n    return this.isURL(url) || (Array.isArray(url) && this.isURL(url[0]));\n};\n\nmodule.exports = File;\n",
    "'use strict';\n\nvar Emitter = require(22);\n\nfunction Loader(url) {\n    var emitter = new Emitter(),\n        progress = 0,\n        audioContext,\n        isTouchLocked,\n        request,\n        timeout,\n        data,\n        ERROR_STATE = ['', 'ABORTED', 'NETWORK', 'DECODE', 'SRC_NOT_SUPPORTED'];\n\n    var start = function() {\n        if(audioContext) {\n            loadArrayBuffer();\n        } else {\n            loadAudioElement();\n        }\n    };\n\n    var dispatchComplete = function(buffer) {\n        emitter.emit('progress', 1);\n        emitter.emit('loaded', buffer);\n        emitter.emit('complete', buffer);\n\n        removeListeners();\n    };\n\n    // audio buffer\n\n    var loadArrayBuffer = function() {\n        request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.addEventListener('progress', progressHandler);\n        request.addEventListener('load', loadHandler);\n        request.addEventListener('error', errorHandler);\n        request.send();\n    };\n\n    var progressHandler = function(event) {\n        if (event.lengthComputable) {\n            progress = event.loaded / event.total;\n            emitter.emit('progress', progress);\n        }\n    };\n\n    var loadHandler = function() {\n        audioContext.decodeAudioData(\n            request.response,\n            function(buffer) {\n                data = buffer;\n                request = null;\n                progress = 1;\n                dispatchComplete(buffer);\n            },\n            function(e) {\n                emitter.emit('error', e);\n            }\n        );\n    };\n\n    // audio element\n\n    var loadAudioElement = function() {\n        if(!data || !data.tagName) {\n            data = document.createElement('audio');\n        }\n\n        if(!isTouchLocked) {\n            // timeout because sometimes canplaythrough doesn't fire\n            window.clearTimeout(timeout);\n            timeout = window.setTimeout(readyHandler, 2000);\n            data.addEventListener('canplaythrough', readyHandler, false);\n        }\n\n        data.addEventListener('error', errorHandler, false);\n        data.preload = 'auto';\n        data.src = url;\n        data.load();\n\n        if (isTouchLocked) {\n            dispatchComplete(data);\n        }\n    };\n\n    var readyHandler = function() {\n        window.clearTimeout(timeout);\n        if(!data) { return; }\n        progress = 1;\n        dispatchComplete(data);\n    };\n\n    // error\n\n    var errorHandler = function(event) {\n        window.clearTimeout(timeout);\n        // emitter.emit('error', (data && data.error));\n\n        var message = event;\n\n        if(data && data.error) {\n            message = 'MediaError: ' + ERROR_STATE[data.error.code] + ' ' + data.src;\n        }\n\n        emitter.emit('error', message);\n\n        removeListeners();\n    };\n\n    // clean up\n\n    var removeListeners = function() {\n        emitter.off('error');\n        emitter.off('progress');\n        emitter.off('complete');\n        emitter.off('loaded');\n\n        if(data && typeof data.removeEventListener === 'function') {\n            data.removeEventListener('canplaythrough', readyHandler);\n            data.removeEventListener('error', errorHandler);\n        }\n\n        if(request) {\n            request.removeEventListener('progress', progressHandler);\n            request.removeEventListener('load', loadHandler);\n            request.removeEventListener('error', errorHandler);\n        }\n    };\n\n    var cancel = function() {\n        removeListeners();\n\n        if(request && request.readyState !== 4) {\n          request.abort();\n        }\n        request = null;\n\n        window.clearTimeout(timeout);\n    };\n\n    var destroy = function() {\n        cancel();\n        request = null;\n        data = null;\n        audioContext = null;\n    };\n\n    // reload\n\n    var load = function(newUrl) {\n        url = newUrl;\n        start();\n    };\n\n    var api = {\n        on: emitter.on.bind(emitter),\n        once: emitter.once.bind(emitter),\n        off: emitter.off.bind(emitter),\n        load: load,\n        start: start,\n        cancel: cancel,\n        destroy: destroy\n    };\n\n    Object.defineProperties(api, {\n        'data': {\n            get: function() {\n                return data;\n            }\n        },\n        'progress': {\n            get: function() {\n                return progress;\n            }\n        },\n        'audioContext': {\n            set: function(value) {\n                audioContext = value;\n            }\n        },\n        'isTouchLocked': {\n            set: function(value) {\n                isTouchLocked = value;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\nLoader.Group = function() {\n    var emitter = new Emitter(),\n        queue = [],\n        numLoaded = 0,\n        numTotal = 0,\n        loader;\n\n    var add = function(loader) {\n        queue.push(loader);\n        numTotal++;\n        return loader;\n    };\n\n    var start = function() {\n        numTotal = queue.length;\n        next();\n    };\n\n    var next = function() {\n        if(queue.length === 0) {\n            loader = null;\n            emitter.emit('complete');\n            return;\n        }\n\n        loader = queue.pop();\n        loader.on('progress', progressHandler);\n        loader.once('loaded', completeHandler);\n        loader.once('error', errorHandler);\n        loader.start();\n    };\n\n    var progressHandler = function(progress) {\n        var loaded = numLoaded + progress;\n        emitter.emit('progress', loaded / numTotal);\n    };\n\n    var completeHandler = function() {\n        numLoaded++;\n        loader.off('progress', progressHandler);\n        loader.off('loaded', completeHandler);\n        loader.off('error', errorHandler);\n        emitter.emit('progress', numLoaded / numTotal);\n        next();\n    };\n\n    var errorHandler = function(e) {\n        console.error.call(console, e);\n        loader.off('progress', progressHandler);\n        loader.off('loaded', completeHandler);\n        loader.off('error', errorHandler);\n        emitter.emit('error', e);\n        next();\n    };\n\n    return Object.freeze({\n        on: emitter.on.bind(emitter),\n        once: emitter.once.bind(emitter),\n        off: emitter.off.bind(emitter),\n        add: add,\n        start: start\n    });\n};\n\nmodule.exports = Loader;\n",
    "'use strict';\n\nfunction Microphone(connected, denied, error) {\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n    error = error || function() {};\n\n    var isSupported = !!navigator.getUserMedia,\n        stream = null,\n        api = {};\n\n    var connect = function() {\n        if(!isSupported) { return; }\n\n        navigator.getUserMedia({audio:true}, function(stream) {\n            stream = stream;\n            connected(stream);\n        }, function(e) {\n            if(denied && e.name === 'PermissionDeniedError' || e === 'PERMISSION_DENIED') {\n                // console.log('Permission denied. Reset by clicking the camera icon with the red cross in the address bar');\n                denied();\n            }\n            else {\n                error(e.message || e);\n            }\n        });\n        return api;\n    };\n\n    var disconnect = function() {\n        if(stream) {\n            stream.stop();\n            stream = null;\n        }\n        return api;\n    };\n\n    Object.defineProperties(api, {\n        connect: {\n            value: connect\n        },\n        disconnect: {\n            value: disconnect\n        },\n        isSupported: {\n            value: isSupported\n        },\n        stream: {\n            get: function() {\n                return stream;\n            }\n        }\n    });\n\n    return Object.freeze(api);\n}\n\n\nmodule.exports = Microphone;\n",
    "'use strict';\n\n/*\n * TODO: Ended handler\n */\n\nvar Group = require(14);\n\nfunction SoundGroup(context, destination) {\n    Group.call(this, context, destination);\n    this._src = null;\n}\n\nSoundGroup.prototype = Object.create(Group.prototype);\nSoundGroup.prototype.constructor = SoundGroup;\n\n/*\n * Add / remove\n */\n\nSoundGroup.prototype.add = function(sound) {\n    Group.prototype.add.call(this, sound);\n    this._getSource();\n};\n\nSoundGroup.prototype.remove = function(soundOrId) {\n    Group.prototype.remove.call(this, soundOrId);\n    this._getSource();\n};\n\nSoundGroup.prototype._getSource = function() {\n    if(!this._sounds.length) { return; }\n\n    this._sounds.sort(function(a, b) {\n        return b.duration - a.duration;\n    });\n\n    this._src = this._sounds[0];\n};\n\n/*\n * Getters & Setters\n */\n\nObject.defineProperties(SoundGroup.prototype, {\n    'currentTime': {\n        get: function() {\n            return this._src ? this._src.currentTime : 0;\n        },\n        set: function(value) {\n            this.stop();\n            this.play(0, value);\n        }\n    },\n    'duration': {\n        get: function() {\n            return this._src ? this._src.duration : 0;\n        }\n    },\n    // 'ended': {\n    //     get: function() {\n    //         return this._src ? this._src.ended : false;\n    //     }\n    // },\n    'loop': {\n        get: function() {\n            return this._loop;\n        },\n        set: function(value) {\n            this._loop = !!value;\n            this._sounds.forEach(function(sound) {\n                sound.loop = this._loop;\n            });\n        }\n    },\n    'paused': {\n        get: function() {\n            // return this._src ? this._src.paused : false;\n            return !!this._src && this._src.paused;\n        }\n    },\n    'progress': {\n        get: function() {\n            return this._src ? this._src.progress : 0;\n        }\n    },\n    'playbackRate': {\n        get: function() {\n            return this._playbackRate;\n        },\n        set: function(value) {\n            this._playbackRate = value;\n            this._sounds.forEach(function(sound) {\n                sound.playbackRate = this._playbackRate;\n            });\n        }\n    },\n    'playing': {\n        get: function() {\n            // return this._src ? this._src.playing : false;\n            return !!this._src && this._src.playing;\n        }\n    }\n});\n\nmodule.exports = SoundGroup;\n",
    "'use strict';\n\nvar Microphone = require(25),\n    Waveform = require(28);\n\nvar Utils = {};\n\n/*\n * audio context\n */\n\nUtils.setContext = function(context) {\n    this._context = context;\n};\n\n/*\n * audio buffer\n */\n\nUtils.cloneBuffer = function(buffer) {\n    if(!this._context) { return buffer; }\n\n    var numChannels = buffer.numberOfChannels,\n        cloned = this._context.createBuffer(numChannels, buffer.length, buffer.sampleRate);\n    for (var i = 0; i < numChannels; i++) {\n        cloned.getChannelData(i).set(buffer.getChannelData(i));\n    }\n    return cloned;\n};\n\nUtils.reverseBuffer = function(buffer) {\n    var numChannels = buffer.numberOfChannels;\n    for (var i = 0; i < numChannels; i++) {\n        Array.prototype.reverse.call(buffer.getChannelData(i));\n    }\n    return buffer;\n};\n\n/*\n * ramp audio param\n */\n\nUtils.ramp = function(param, fromValue, toValue, duration) {\n    if(!this._context) { return; }\n\n    param.setValueAtTime(fromValue, this._context.currentTime);\n    param.linearRampToValueAtTime(toValue, this._context.currentTime + duration);\n};\n\n/*\n * get frequency from min to max by passing 0 to 1\n */\n\nUtils.getFrequency = function(value) {\n    if(!this._context) { return 0; }\n    // get frequency by passing number from 0 to 1\n    // Clamp the frequency between the minimum value (40 Hz) and half of the\n    // sampling rate.\n    var minValue = 40;\n    var maxValue = this._context.sampleRate / 2;\n    // Logarithm (base 2) to compute how many octaves fall in the range.\n    var numberOfOctaves = Math.log(maxValue / minValue) / Math.LN2;\n    // Compute a multiplier from 0 to 1 based on an exponential scale.\n    var multiplier = Math.pow(2, numberOfOctaves * (value - 1.0));\n    // Get back to the frequency value between min and max.\n    return maxValue * multiplier;\n};\n\n/*\n * microphone util\n */\n\nUtils.microphone = function(connected, denied, error) {\n    return new Microphone(connected, denied, error);\n};\n\n/*\n * Format seconds as timecode string\n */\n\nUtils.timeCode = function(seconds, delim) {\n    if(delim === undefined) { delim = ':'; }\n    var h = Math.floor(seconds / 3600);\n    var m = Math.floor((seconds % 3600) / 60);\n    var s = Math.floor((seconds % 3600) % 60);\n    var hr = (h === 0 ? '' : (h < 10 ? '0' + h + delim : h + delim));\n    var mn = (m < 10 ? '0' + m : m) + delim;\n    var sc = (s < 10 ? '0' + s : s);\n    return hr + mn + sc;\n};\n\n/*\n * waveform\n */\n\nUtils.waveform = function(buffer, length) {\n    return new Waveform(buffer, length);\n};\n\nmodule.exports = Utils;\n",
    "'use strict';\n\nfunction Waveform() {\n\n    var audioBuffer,\n        waveformData;\n\n    var compute = function(buffer, length) {\n        if(!window.Float32Array || !window.AudioBuffer) { return []; }\n\n        var sameBuffer = buffer === audioBuffer;\n        var sameLength = waveformData && waveformData.length === length;\n        if(sameBuffer && sameLength) { return waveformData; }\n        \n        //console.log('-------------------');\n        //console.time('waveformData');\n        var waveform = new Float32Array(length),\n            chunk = Math.floor(buffer.length / length),\n            //chunk = buffer.length / length,\n            resolution = 5, // 10\n            incr = Math.floor(chunk / resolution),\n            greatest = 0;\n\n        if(incr < 1) { incr = 1; }\n\n        for (var i = 0, chnls = buffer.numberOfChannels; i < chnls; i++) {\n            // check each channel\n            var channel = buffer.getChannelData(i);\n            //for (var j = length - 1; j >= 0; j--) {\n            for (var j = 0; j < length; j++) {\n                // get highest value within the chunk\n                //var ch = j * chunk;\n                //for (var k = ch + chunk - 1; k >= ch; k -= incr) {\n                for (var k = j * chunk, l = k + chunk; k < l; k += incr) {\n                    // select highest value from channels\n                    var a = channel[k];\n                    if(a < 0) { a = -a; }\n                    if (a > waveform[j]) {\n                        waveform[j] = a;\n                    }\n                    // update highest overall for scaling\n                    if(a > greatest) {\n                        greatest = a;\n                    }\n                }\n            }\n        }\n        // scale up?\n        var scale = 1 / greatest,\n            len = waveform.length;\n        for (i = 0; i < len; i++) {\n            waveform[i] *= scale;\n        }\n        //console.timeEnd('waveformData');\n\n        // cache for repeated calls\n        audioBuffer = buffer;\n        waveformData = waveform;\n\n        return waveform;\n    };\n\n    var draw = function(config) {\n        var x, y;\n        var canvas = config.canvas || document.createElement('canvas');\n        var width = config.width || canvas.width;\n        var height = config.height || canvas.height;\n        var color = config.color || '#333333';\n        var bgColor = config.bgColor || '#dddddd';\n        var buffer = config.sound ? config.sound.data : config.buffer || audioBuffer;\n        var data = this.compute(buffer, width);\n\n        var context = canvas.getContext('2d');\n        context.strokeStyle = color;\n        context.fillStyle = bgColor;\n        context.fillRect(0, 0, width, height);\n        context.beginPath();\n        for (var i = 0; i < data.length; i++) {\n            x = i + 0.5;\n            y = height - Math.round(height * data[i]);\n            context.moveTo(x, y);\n            context.lineTo(x, height);\n        }\n        context.stroke();\n\n        return canvas;\n    };\n    \n    return Object.freeze({\n        compute: compute,\n        draw: draw\n    });\n}\n\nmodule.exports = Waveform;\n"
  ]
}